#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

string can_candidate_a_win(int N, int X, vector<int>& A_votes, vector<int>& B_votes) {
    int initial_wins = 0;
    for (int i = 0; i < N; i++) {
        if (A_votes[i] > B_votes[i]) initial_wins++;
    }
    
    int win_threshold = (N / 2) + 1;
    int states_needed = win_threshold - initial_wins;
    
    if (states_needed <= 0) return "YES";
    
    vector<int> deficits;
    for (int i = 0; i < N; i++) {
        if (B_votes[i] >= A_votes[i]) {
            deficits.push_back(B_votes[i] - A_votes[i] + 1);
        }
    }
    
    sort(deficits.begin(), deficits.end());
    
    for (int deficit : deficits) {
        if (X >= deficit) {
            X -= deficit;
            states_needed--;
            if (states_needed == 0) return "YES";
        } else {
            break;
        }
    }
    
    return "NO";
}

int main() {
    int T;
    cin >> T;
    vector<string> results;
    while (T--) {
        int N, X;
        cin >> N >> X;
        vector<int> A_votes(N), B_votes(N);
        for (int i = 0; i < N; i++) cin >> A_votes[i];
        for (int i = 0; i < N; i++) cin >> B_votes[i];
        results.push_back(can_candidate_a_win(N, X, A_votes, B_votes));
    }
    for (const string& result : results) cout << result << endl;
    return 0;
}
